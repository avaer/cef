set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR aarch64)
set(TARGET_ABI "linux-gnu")
# specify the cross compiler
SET(CMAKE_C_COMPILER   clang)
SET(CMAKE_CXX_COMPILER clang++)

set(CMAKE_SYSROOT /home/a/code/chromium_git/chromium/src/build/linux/debian_sid_arm64-sysroot)
set(triple aarch64-linux-gnu)

include_directories(/home/a/code/chromium_git/chromium/src/build/linux/debian_sid_arm64-sysroot/usr/include/aarch64-linux-gnu/)
include_directories(/home/a/code/chromium_git/chromium/src/build/linux/debian_sid_arm64-sysroot/usr/include/c++/6/)
include_directories(/home/a/code/chromium_git/chromium/src/build/linux/debian_sid_arm64-sysroot/usr/include/aarch64-linux-gnu/c++/6/)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} --target=aarch64-linux-gnu")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --target=aarch64-linux-gnu")

# To build the tests, we need to set where the target environment containing
# the required library is. On Debian-like systems, this is
# /usr/aarch64-linux-gnu.
SET(CMAKE_FIND_ROOT_PATH "/usr/aarch64-${TARGET_ABI}")
# search for programs in the build host directories
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

# Set additional variables.
# If we don't set some of these, CMake will end up using the host version.
# We want the full path, however, so we can pass EXISTS and other checks in
# the our CMake code.
find_program(GCC_FULL_PATH clang)
if (NOT GCC_FULL_PATH)
  message(FATAL_ERROR "Cross-compiler clang not found")
endif ()
get_filename_component(GCC_DIR ${GCC_FULL_PATH} PATH)
SET(CMAKE_LINKER       ${GCC_DIR}/lld      CACHE FILEPATH "linker")
# SET(CMAKE_ASM_COMPILER ${GCC_DIR}/llvm-as      CACHE FILEPATH "assembler")
# SET(CMAKE_OBJCOPY      ${GCC_DIR}/aarch64-${TARGET_ABI}-objcopy CACHE FILEPATH "objcopy")
# SET(CMAKE_STRIP        ${GCC_DIR}/aarch64-${TARGET_ABI}-strip   CACHE FILEPATH "strip")
# SET(CMAKE_CPP          ${GCC_DIR}/aarch64-${TARGET_ABI}-cpp     CACHE FILEPATH "cpp")
